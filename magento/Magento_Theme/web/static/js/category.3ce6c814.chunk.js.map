{"version":3,"sources":["component/ProductAttributeValue/ProductAttributeValue.component.js","component/ExpandableContentShowMore/ExpandableContentShowMore.component.js"],"names":["ExpandableContentShowMore","handleShowAllButtonClick","state","isExpanding","setState","isOpen","this","expandableRef","current","expandableContentHeight","getBoundingClientRect","height","prevProps","transitionDurationCSStoMS","window","getComputedStyle","getPropertyValue","slice","setTimeout","props","children","length","getExpandableContentHeight","ref","createRef","showElemCount","console","log","mods","txt","__","onClick","mix","block","likeLink","elem","child","style","renderExpandableChildren","renderShowAllButton","isMobile","renderContent","defaultProps","Object","defineProperty","_ExpandableContentShowMore","value"],"mappings":"0JAAA,yD,gJCoBaA,EAAb,4MAgFIC,yBAA2B,WACC,EAAKC,MAArBC,aAGJ,EAAKC,UAAS,kBAAiB,CAAEC,QAAnB,EAAGA,OAAiCF,aAAa,OApF3E,kEAa2BG,KAAKJ,MAAhBG,SAGAC,KAAKC,cAAcC,UACnBF,KAAKG,wBAA0BH,KAAKC,cAAcC,QAAQE,wBAAwBC,QAEtFL,KAAKF,SAAS,CAAEC,QAAQ,OAnBpC,yCAwBuBO,GAAY,IAAD,OAG1B,GAFwBN,KAAKJ,MAArBC,YAES,CACb,IACMU,EADmB,IACSC,OAC7BC,iBAAiBT,KAAKC,cAAcC,SACpCQ,iBAAiB,uBACjBC,MAAM,GAAI,GAEfC,YAAW,kBAAM,EAAKd,SAAS,CAAED,aAAa,MAC1CU,GAGyBP,KAAKa,MAA9BC,SAAYC,SACyBT,EAArCQ,SAAYC,QAGhBf,KAAKgB,+BA1CjB,kCA+CgBH,GACR,mEAAkBA,GAElBb,KAAKiB,IAAMC,sBAHI,MAKiClB,KAAKa,MAA7CM,EALO,EAKPA,cAA2BJ,EALpB,EAKQD,SAAYC,OAEnCf,KAAKC,cAAgBiB,sBACrBlB,KAAKG,wBAA0B,OAE/BH,KAAKJ,MAAQ,CACTG,OAAQgB,EAASI,EACjBtB,aAAa,KA3DzB,mDAgEkC,IAAD,OACjBE,EAAWC,KAAKJ,MAAhBG,OADiB,EAEuBC,KAAKa,MAA7CM,EAFiB,EAEjBA,cAA2BJ,EAFV,EAEFD,SAAYC,OAE/BhB,GAAUgB,GAAUI,EACpBnB,KAAKF,SAAS,CAAEC,QAAQ,KAI5BC,KAAKG,wBAA0B,OAC/BH,KAAKF,SAAS,CAAEC,QAAQ,IAAQ,WAC5B,EAAKI,wBAA0B,EAAKF,cAAcC,QAAQE,wBAAwBC,OAClF,EAAKP,SAAS,CAAEC,QAAQ,UA5EpC,4CAwF2B,IAAD,EAC8BC,KAAKa,MAA7CM,EADU,EACVA,cAA2BJ,EADjB,EACKD,SAAYC,OAEnC,GADAK,QAAQC,IAAI,CAAC,cACTN,GAAUI,EACV,OAAO,KAEXC,QAAQC,IAAI,CAAC,cANK,IAQVtB,EAAWC,KAAKJ,MAAhBG,OAEFuB,EAAOvB,EAAS,CAAEH,MAAO,UAAa,GACtC2B,EAAMxB,EAASyB,EAAG,aAAgB,YAExC,qBAEMC,QAAUzB,KAAKL,yBACf+B,IAAM,CAAEC,MAAO,SAAUL,KAAM,CAAEM,UAAU,IAC3CD,MAAM,4BACNE,KAAK,gBACLP,KAAOA,GAEHC,KA7GlB,iDAkHgC,IAAD,EACSvB,KAAKJ,MAA7BG,EADe,EACfA,OAAQF,EADO,EACPA,YADO,EAEaG,KAAKa,MAAjCC,EAFe,EAEfA,SAAUK,EAFK,EAELA,cAEZW,EAAS/B,GAAUF,EAAeiB,EAASH,MAAMQ,GAAiB,KAClEY,EAAQ,CACV1B,OAAQN,EAASC,KAAKG,wBAA0B,GAGpD,kBAEMc,IAAMjB,KAAKC,cACX0B,MAAM,4BACNE,KAAK,qBACLE,MAAQA,GAEJD,KAlIlB,sCAuIqB,IAAD,EACwB9B,KAAKa,MAAjCC,EADI,EACJA,SAAUK,EADN,EACMA,cAEZW,EAAQhB,EAASH,MAAM,EAAGQ,GAEhC,2BAEUW,EACA9B,KAAKgC,2BACLhC,KAAKiC,yBAhJvB,+BAqJc,IAAD,EAC0BjC,KAAKa,MAA5BC,EADH,EACGA,SAER,OAHK,EACaoB,SAGPpB,EAGX,WACSa,MAAM,4BAA4BV,IAAMjB,KAAKiB,KAC5CjB,KAAKmC,qBA9JvB,uBAAazC,EAOF0C,aAAe,CAClBjB,cAAe,GA5BvBkB,OAAOC,eAAeC,EAA4B,OAAQ,CAAEC,MAAO,8B,2DAuLpD9C,Q","file":"static/js/category.3ce6c814.chunk.js","sourcesContent":["import './ProductAttributeValue.override.style.scss';\n\nexport { default } from 'SourceComponent/ProductAttributeValue/ProductAttributeValue.component';\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport PropTypes from 'prop-types';\nimport { createRef, PureComponent } from 'react';\n\nimport { ChildrenType } from 'Type/Common';\n\nimport './ExpandableContentShowMore.style';\n\n/** @namespace Component/ExpandableContentShowMore/Component */\n// eslint-disable-next-line @scandipwa/scandipwa-guidelines/use-namespace, @scandipwa/scandipwa-guidelines/derived-class-names\nexport class ExpandableContentShowMore extends PureComponent {\n    static propTypes = {\n        showElemCount: PropTypes.number,\n        children: ChildrenType.isRequired,\n        isMobile: PropTypes.bool.isRequired\n    };\n\n    static defaultProps = {\n        showElemCount: 3\n    };\n\n    // eslint-disable-next-line @scandipwa/scandipwa-guidelines/only-render-in-component\n    componentDidMount() {\n        const { isOpen } = this.state;\n\n        if (isOpen) {\n            if (this.expandableRef.current) {\n                this.expandableContentHeight = this.expandableRef.current.getBoundingClientRect().height;\n            }\n            this.setState({ isOpen: false });\n        }\n    }\n\n    // eslint-disable-next-line @scandipwa/scandipwa-guidelines/only-render-in-component\n    componentDidUpdate(prevProps) {\n        const { isExpanding } = this.state;\n\n        if (isExpanding) {\n            const ONE_SECOND_IN_MS = 1000;\n            const transitionDurationCSStoMS = window\n                .getComputedStyle(this.expandableRef.current)\n                .getPropertyValue('transition-duration')\n                .slice(0, -1) * ONE_SECOND_IN_MS;\n\n            setTimeout(() => this.setState({ isExpanding: false }),\n                transitionDurationCSStoMS);\n        }\n\n        const { children: { length } } = this.props;\n        const { children: { length: prevLength } } = prevProps;\n\n        if (length !== prevLength) {\n            this.getExpandableContentHeight();\n        }\n    }\n\n    // eslint-disable-next-line @scandipwa/scandipwa-guidelines/only-render-in-component\n    __construct(props) {\n        super.__construct(props);\n\n        this.ref = createRef();\n\n        const { showElemCount, children: { length } } = this.props;\n\n        this.expandableRef = createRef();\n        this.expandableContentHeight = 'auto';\n\n        this.state = {\n            isOpen: length > showElemCount,\n            isExpanding: false\n        };\n    }\n\n    // eslint-disable-next-line @scandipwa/scandipwa-guidelines/only-render-in-component\n    getExpandableContentHeight() {\n        const { isOpen } = this.state;\n        const { showElemCount, children: { length } } = this.props;\n\n        if (isOpen && length <= showElemCount) {\n            this.setState({ isOpen: false });\n            return;\n        }\n\n        this.expandableContentHeight = 'auto';\n        this.setState({ isOpen: true }, () => {\n            this.expandableContentHeight = this.expandableRef.current.getBoundingClientRect().height;\n            this.setState({ isOpen: false });\n        });\n    }\n\n    handleShowAllButtonClick = () => {\n        const { isExpanding } = this.state;\n\n        if (!isExpanding) {\n            this.setState(({ isOpen }) => ({ isOpen: !isOpen, isExpanding: true }));\n        }\n    };\n\n    renderShowAllButton() {\n        const { showElemCount, children: { length } } = this.props;\n        console.log(['showAll-0']);\n        if (length <= showElemCount) {\n            return null;\n        }\n        console.log(['showAll-1']);\n\n        const { isOpen } = this.state;\n\n        const mods = isOpen ? { state: 'isOpen' } : {};\n        const txt = isOpen ? __('Show less') : ('Show more');\n\n        return (\n            <button\n              onClick={ this.handleShowAllButtonClick }\n              mix={ { block: 'Button', mods: { likeLink: true } } }\n              block=\"ExpandableContentShowMore\"\n              elem=\"ShowAllButton\"\n              mods={ mods }\n            >\n                { txt }\n            </button>\n        );\n    }\n\n    renderExpandableChildren() {\n        const { isOpen, isExpanding } = this.state;\n        const { children, showElemCount } = this.props;\n\n        const child = (isOpen || isExpanding) ? children.slice(showElemCount) : null;\n        const style = {\n            height: isOpen ? this.expandableContentHeight : 0\n        };\n\n        return (\n            <div\n              ref={ this.expandableRef }\n              block=\"ExpandableContentShowMore\"\n              elem=\"ExpandableChildren\"\n              style={ style }\n            >\n                { child }\n            </div>\n        );\n    }\n\n    renderContent() {\n        const { children, showElemCount } = this.props;\n\n        const child = children.slice(0, showElemCount);\n\n        return (\n            <>\n                { child }\n                { this.renderExpandableChildren() }\n                { this.renderShowAllButton() }\n            </>\n        );\n    }\n\n    render() {\n        const { children, isMobile } = this.props;\n\n        if (isMobile) {\n            return children;\n        }\n\n        return (\n            <div block=\"ExpandableContentShowMore\" ref={ this.ref }>\n                { this.renderContent() }\n            </div>\n        );\n    }\n}\nexport default ExpandableContentShowMore;\n"],"sourceRoot":""}